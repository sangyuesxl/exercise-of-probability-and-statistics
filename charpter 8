#概率论与数理统计（浙大版）第8章习题
# program by sangyue
import numpy as np
from scipy.stats import norm,t,chi2,f
import matplotlib.pyplot as plt
from math import sqrt,pi,exp

def exercise1():
    x=np.array([3.25,3.27,3.24,3.26,3.24])
    x_bar=np.mean(x)
    s2=sum([(xi-x_bar)**2 for xi in x])/(len(x)-1)
    ta=(x_bar-3.25)/sqrt(s2/len(x))
    p=t.cdf(ta,len(x)-1)
    print(s2,ta,p)

def exercise2():
    x=np.array([0.693,0.749,0.654,0.670,0.662,0.672,0.615,0.606,0.690,0.628,
                0.668,0.611,0.606,0.609,0.601,0.553,0.570,0.844,0.576,0.933])
    x_bar=np.mean(x)
    s2=sum([(xi-x_bar)**2 for xi in x])/(len(x)-1)
    #(x_bar-u)/sqrt(s2/n)`t(n-1)
    u=0.618
    alpha=0.05
    tt=(x_bar-u)/sqrt(s2/len(x))
    print(tt)
    plt.figure(figsize=[10,8],dpi=120)
    tx=np.linspace(-5,5,1001)
    y=t.pdf(tx,len(x)-1)
    plt.plot(tx,y,c='r')
    plt.vlines(x=0,ymin=-0.1,ymax=0.5)
    plt.plot([-5.0,5.0],[0.0,0.0],c='b')
    ta2=t.ppf(1-alpha/2,len(x)-1)
    plt.plot([-ta2,-ta2], [0.0, 0.051], c='b')
    plt.plot([ta2,ta2], [0.0, 0.051], c='b')
    plt.scatter(tt,0,marker="o")
    plt.annotate(s="p-value",xy=(tt,0),xytext=(tt-0.5,-0.03),
                 arrowprops={"arrowstyle": "->"})
    plt.title('T test graph',fontsize=20,color='g')
    plt.xticks(np.linspace(-5,5,11))
    plt.yticks(np.linspace(0,0.5,6))
    plt.xlabel('Variable X',fontsize=10,color="y")
    plt.ylabel('probability',fontsize=10,color="y")
    plt.show()

def exercise3():
    x_bar=950
    sigma=100
    alpha=0.05
    u=1000
    n=25
    z=(x_bar-u)/(sigma/sqrt(n))
    p=norm.cdf(z,loc=0,scale=1)
    print(z)
    if p <0.05:
        print("u<1000")
    else:
        print("u>=1000")

def exercise4():
    x=np.array([9.8,10.4,10.6,9.6,9.7,
                9.9,10.9,11.1,9.6,10.2,
                10.3,9.6,9.9,11.2,10.6,
                9.8,10.5,10.1,10.5,9.7])
    x_bar=np.mean(x)
    s2=sum([(xi-x_bar)**2 for xi in x])/(len(x)-1)
    tx=(x_bar-10)/sqrt(s2/len(x))
    p=t.cdf(tx,len(x)-1)
    if p>0.95:
        print("hours >10")
    else:
        print("hours <=10")

def exercise7():
    old=np.array([6,4,5,5,6,5,5,6,4,6,7,4])
    new=np.array([2,1,2,2,1,0,3,2,1,0,1,3])
    n1=len(old)
    n2=len(new)
    old_bar=np.mean(old)
    s2old=sum([(xi-old_bar)**2 for xi in old])/(n1-1)
    new_bar=np.mean(new)
    s2new=sum([(yi-new_bar)**2 for yi in new])/(n2-1)
    sw2=((n1-1)*s2old+(n2-1)*s2new)/(n1+n2-2)
    tx=(old_bar-new_bar-2)/sqrt(sw2*(1/n1+1/n2))
    p=t.cdf(tx,n1+n2-2)
    print(old_bar,new_bar,tx,p)

def exercise9():
    x=np.array([6.6,7,8.3,8.2,5.2,9.3,7.9,8.5,
                7.8,7.5,6.1,8.9,6.1,9.4,9.1])
    y=np.array([7.4,5.4,8.8,8.0,6.8,9.1,6.3,7.5,
                7.0,6.5,4.4,7.7,4.2,9.4,9.1])
    D=[(xi-yi) for xi,yi in zip(x,y)]
    D_bar=np.mean(D)
    n=len(D)
    s2=sum([(di-D_bar)**2 for di in D])/(n-1)
    tx=D_bar/sqrt(s2/n)
    p=t.cdf(tx,n-1)
    print(D_bar,p)

def exercise12():
    s=0.007
    sigma=0.005
    a=0.05
    n=9
    kai=(n-1)*s**2/(sigma**2)
    p=chi2.cdf(kai,n-1)

    plt.figure(figsize=[10,8],dpi=120)
    x=np.linspace(0,30,10000)
    y=chi2.pdf(x,n-1)
    plt.plot(x,y,c='r')
    xj=chi2.ppf(0.95,n-1)
    yj=chi2.pdf(xj,n-1)
    plt.plot([xj,xj],[0,yj],c='b')
    plt.plot([0,30],[0,0],c='b')
    plt.scatter(kai,0,marker='o')
    plt.annotate('p-value',xy=(kai,0),
                 xytext=(kai+1,0-0.005),
                 arrowprops={"arrowstyle": "->"})
    plt.show()

def exercise17():
    x=np.array([101,100,99,99,98,100,98,99,99,99])
    y=np.array([100,98,100,99,98,99,98,98,99,100])
    u1=np.mean(x)
    u2=np.mean(y)
    s12=sum([(xi-u1)**2 for xi in x])/(len(x)-1)
    s22=sum([(yi-u2)**2 for yi in y])/(len(y)-1)

    #H0:sigma12=sigma22
    fx=s12/s22
    p=f.cdf(fx,len(x)-1,len(y)-1)
    print(fx,p)
    xx=np.linspace(0.01,10,1000)
    yy=f.pdf(xx,len(x)-1,len(y)-1)
    plt.plot(xx,yy,c='r')
    plt.scatter(fx,0,c='r')
    plt.show()

    #h': u1=u2
    sw2=((len(x)-1)*s12+(len(y)-1)*s22)/(len(x)+len(y)-2)
    tx=(u1-u2)/sqrt(sw2/(1/len(x)+len(y)))
    p=t.cdf(tx,len(x)+len(y)-2)
    print(p)

def exercise19():
    n1=60
    n2=40
    s12=15.46
    s22=9.66
    sx=s12/s22
    p=f.cdf(sx,n1-1,n2-1)
    print(p)

def exercise20():
    u0=15
    sigma2=2.5
    n=8
    alpha=0.05
    beta=0.05
    plt.figure(figsize=[12,9],dpi=120)
    x=np.linspace(5,25,1000)
    y1=norm.pdf(x,loc=15,scale=sqrt(2.5/n))
    y2=norm.pdf(x,loc=13,scale=sqrt(2.5/n))
    plt.plot(x,y1,c='r')
    xa=norm.ppf(alpha,loc=15,scale=sqrt(2.5/n))
    ya=norm.pdf(xa,loc=15,scale=sqrt(2.5/n))
    plt.plot([xa,xa],[0,ya],c='r')

    plt.plot(x,y2,c='b')
    xb=norm.ppf(1-beta,loc=13,scale=sqrt(2.5/n))
    yb=norm.pdf(xb,loc=13,scale=sqrt(2.5/n))
    plt.plot([xb,xb],[0,yb],c='b')
    plt.show()

def exercise21():
    X=np.array([108,124,124,106,138,163,159,134])
    x_bar=np.mean(X)
    n=len(X)
    S2=sum([(xi-x_bar)**2 for xi in X])/(n-1)
    #t(n-1)`(X-u)/(S/sqrt(n))
    tx=(x_bar-125)/sqrt(S2/n)
    p=t.cdf(tx,n-1)
    if p<=0.95:
        print("H0 True")
    else:
        print("H0 False")

    #question 2
    zx=norm.ppf(0.1)

def exercise25():
    x=np.array([20,30,40,50,60,70,80,90,100])
    y=np.array([5,15,30,51,60,23,10,6])
    for i in range(len(y)):
        plt.plot([x[i],x[i],x[i+1],x[i+1]],[0,y[i],y[i],0],c='r')
    plt.show()

    px=[]
    for i in range(8):
        p1=norm.cdf(x[i],loc=60,scale=15)
        p2=norm.cdf(x[i+1],loc=60,scale=15)
        px.append(p2-p1)
    px[0]=norm.cdf(x[1], loc=60, scale=15)
    px[7]=1-sum(px[:6])
    kai=[]
    for j in range(8):
        kai1=y[j]*y[j]/200/px[j]
        kai.append(kai1)
    kai_sum=sum(kai)-200
    print(kai)
    kaip=chi2.ppf(0.9,8-1)
    if kai_sum<kaip:
        print('H0 is True',kai_sum,kaip)
    else:
        print('H0 is False', kai_sum, kaip)

if __name__== "__main__":
    exercise25()
